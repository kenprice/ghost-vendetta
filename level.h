#ifndef _LEVEL_H_
#define _LEVEL

#include <Arduino.h>
#define TILE_BLANK = 0
#define TILE_WALL = 1

#define FIRE 1
#define EXPLOSION 2
#define WALL 0x0A
#define BRICK 0x0B

#define BLOCK_DIM 4       // Block dimensions = n where blocks have n*n tiles
#define MAP_DIM 8         // Map dimensions = n where maps have n*n blocks
#define BOARD_DIM BLOCK_DIM * MAP_DIM

extern byte level;

typedef struct {
  unsigned char id;
  unsigned char lifetime;
  unsigned int x;
  unsigned int y;
} GameObject;

PROGMEM const byte blocks[10][16] = {
  {
    0x00, 0x00, 0x00, 0x00,   // 0x00
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
  },
  {
    0x0A, 0x0A, 0x0A, 0x0A,   // 0x01
    0x0A, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x0A, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x0A, 0x0A, 0x0A,   // 0x02
    0x00, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x0A, 0x0A, 0x00,   // 0x03
    0x00, 0x00, 0x0A, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x00, 0x00, 0x0A, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x04
    0x00, 0x00, 0x0A, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x00, 0x00, 0x0A, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x05
    0x00, 0x00, 0x0A, 0x00,
    0x0A, 0x0A, 0x0A, 0x00,
    0x00, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x06
    0x00, 0x00, 0x00, 0x00,
    0x0A, 0x0A, 0x0A, 0x0A,
    0x00, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x07
    0x0A, 0x00, 0x00, 0x00,
    0x0A, 0x0A, 0x0A, 0x0A,
    0x00, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x08
    0x0A, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x0A, 0x00, 0x00, 0x00
  },
  {
    0x0A, 0x00, 0x0A, 0x00,   // 0x09
    0x00, 0x00, 0x00, 0x00,
    0x0A, 0x00, 0x0A, 0x00,
    0x00, 0x00, 0x00, 0x00
  }
};

PROGMEM const byte maps[][MAP_DIM*MAP_DIM] = {
  {
    0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x04,
    0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05
  }
};

byte getTile(unsigned int posX, unsigned int posY);
#endif
